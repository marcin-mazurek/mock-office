{"version":3,"sources":["../../../../src/lib/app/appServer/configurePersistentState.js"],"names":["configurePersistentState","PATH_TO_FILE","schema","type","items","required","properties","running","name","port","id","behaviours","title","event","reuse","reactions","minItems","payload","delay","serversManager","ajv","save","writeFileSync","JSON","stringify","getState","validateFileContent","content","validate","Error","restore","readFile","err","data","persistentState","parse","setState","e","console","error","red"],"mappings":";;;;;kBA4EwBA,wB;;AA5ExB;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,eAAe,kBAArB;AACA,IAAMC,SAAS;AACbC,QAAM,OADO;AAEbC,SAAO;AACLD,UAAM,QADD;AAELE,cAAU,CACR,SADQ,EAER,MAFQ,EAGR,MAHQ,EAIR,IAJQ,EAKR,YALQ,CAFL;AASLC,gBAAY;AACVC,eAAS;AACPJ,cAAM;AADC,OADC;AAIVK,YAAM;AACJL,cAAM;AADF,OAJI;AAOVA,YAAM;AACJA,cAAM;AADF,OAPI;AAUVM,YAAM;AACJN,cAAM;AADF,OAVI;AAaVO,UAAI;AACFP,cAAM;AADJ,OAbM;AAgBVQ,kBAAY;AACVR,cAAM,OADI;AAEVC,eAAO;AACLD,gBAAM,QADD;AAELG,sBAAY;AACVM,mBAAO;AACLT,oBAAM;AADD,aADG;AAIVU,mBAAO;AACLV,oBAAM;AADD,aAJG;AAOVW,mBAAO;AACLX,oBAAM;AADD,aAPG;AAUVY,uBAAW;AACTZ,oBAAM,OADG;AAETa,wBAAU,CAFD;AAGTZ,qBAAO;AACLD,sBAAM,QADD;AAELG,4BAAY;AACVM,yBAAO;AACLT,0BAAM;AADD,mBADG;AAIVA,wBAAM;AACJA,0BAAM;AADF,mBAJI;AAOVc,2BAAS;AACPd,0BAAM;AADC,mBAPC;AAUVe,yBAAO;AACLf,0BAAM;AADD;AAVG,iBAFP;AAgBLE,0BAAU,CAAC,MAAD;AAhBL;AAHE;AAVD,WAFP;AAmCLA,oBAAU,CAAC,WAAD;AAnCL;AAFG;AAhBF;AATP;AAFM,CAAf;;AAuEe,SAASL,wBAAT,CAAkCmB,cAAlC,EAAkD;AAC/D,MAAMC,MAAM,oBAAZ;AACA,WAASC,IAAT,GAAgB;AACd,iBAAGC,aAAH,CAAiBrB,YAAjB,EAA+BsB,KAAKC,SAAL,CAAeL,eAAeM,QAAf,EAAf,CAA/B,EAA0E,MAA1E;AACD;;AAED,WAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,QAAI,CAACP,IAAIQ,QAAJ,CAAa1B,MAAb,EAAqByB,OAArB,CAAL,EAAoC;AAClC,YAAM,IAAIE,KAAJ,CAAU,8DAAV,CAAN;AACD;AACF;;AAED,WAASC,OAAT,GAAmB;AACjB,iBAAGC,QAAH,CAAY9B,YAAZ,EAA0B,UAAC+B,GAAD,EAAMC,IAAN,EAAe;AACvC,UAAID,GAAJ,EAAS;;AAET,UAAI;AACF,YAAME,kBAAkBX,KAAKY,KAAL,CAAWF,IAAX,CAAxB;AACAP,4BAAoBQ,eAApB;AACAf,uBAAeiB,QAAf,CAAwBF,eAAxB;AACD,OAJD,CAIE,OAAOG,CAAP,EAAU;AACV;AACAC,gBAAQC,KAAR,CAAc,eAAOC,GAAP,CAAWH,CAAX,CAAd;AACD;AACF,KAXD;AAYD;;AAED,SAAO;AACLhB,cADK;AAELS;AAFK,GAAP;AAID","file":"configurePersistentState.js","sourcesContent":["import fs from 'fs';\nimport Ajv from 'ajv';\nimport colors from 'colors/safe';\n\nconst PATH_TO_FILE = './chanState.json';\nconst schema = {\n  type: 'array',\n  items: {\n    type: 'object',\n    required: [\n      'running',\n      'name',\n      'type',\n      'id',\n      'behaviours'\n    ],\n    properties: {\n      running: {\n        type: 'boolean'\n      },\n      name: {\n        type: 'string',\n      },\n      type: {\n        type: 'string'\n      },\n      port: {\n        type: 'number',\n      },\n      id: {\n        type: 'string'\n      },\n      behaviours: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            title: {\n              type: 'string'\n            },\n            event: {\n              type: 'object'\n            },\n            reuse: {\n              type: 'string'\n            },\n            reactions: {\n              type: 'array',\n              minItems: 1,\n              items: {\n                type: 'object',\n                properties: {\n                  title: {\n                    type: 'string'\n                  },\n                  type: {\n                    type: 'string'\n                  },\n                  payload: {\n                    type: 'object'\n                  },\n                  delay: {\n                    type: 'number'\n                  }\n                },\n                required: ['type']\n              }\n            }\n          },\n          required: ['reactions']\n        }\n      }\n    }\n  }\n};\n\nexport default function configurePersistentState(serversManager) {\n  const ajv = Ajv();\n  function save() {\n    fs.writeFileSync(PATH_TO_FILE, JSON.stringify(serversManager.getState()), 'utf8');\n  }\n\n  function validateFileContent(content) {\n    if (!ajv.validate(schema, content)) {\n      throw new Error('Corrupted persistent state file. Couldn\\'t load saved state.');\n    }\n  }\n\n  function restore() {\n    fs.readFile(PATH_TO_FILE, (err, data) => {\n      if (err) return;\n\n      try {\n        const persistentState = JSON.parse(data);\n        validateFileContent(persistentState);\n        serversManager.setState(persistentState);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(colors.red(e));\n      }\n    });\n  }\n\n  return {\n    save,\n    restore\n  };\n}\n"]}