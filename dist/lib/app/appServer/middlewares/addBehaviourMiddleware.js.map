{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/addBehaviourMiddleware.js"],"names":["configure","schema","properties","serverId","type","behaviour","event","required","reactions","items","ajv","req","res","validate","body","status","json","error","errors","dataPath","message","server","getServer","webServer","codex","addBehaviour"],"mappings":";;;;;kBAuCwBA,S;;AAvCxB;;;;AACA;;;;AAEA,IAAMC,SAAS;AACbC,cAAY;AACVC,cAAU;AACRC,YAAM;AADE,KADA;AAIVC,eAAW;AACTD,YAAM,QADG;AAETF,kBAAY;AACVI,eAAO;AACLF,gBAAM,QADD;AAELF,sBAAY;AACVE,kBAAM;AACJA,oBAAM;AADF;AADI,WAFP;AAOLG,oBAAU,CAAC,MAAD;AAPL,SADG;AAUVC,mBAAW;AACTJ,gBAAM,OADG;AAETK,iBAAO;AACLL,kBAAM,QADD;AAELF,wBAAY;AACVE,oBAAM;AACJA,sBAAM;AADF;AADI,aAFP;AAOLG,sBAAU,CAAC,MAAD;AAPL;AAFE;AAVD,OAFH;AAyBTA,gBAAU,CAAC,WAAD,EAAc,OAAd;AAzBD;AAJD,GADC;AAiCbA,YAAU,CAAC,UAAD,EAAa,WAAb;AAjCG,CAAf;;AAoCe,SAASP,SAAT,CAAmBU,GAAnB,EAAwB;AACrC,SAAO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAI,CAACF,IAAIG,QAAJ,CAAaZ,MAAb,EAAqBU,IAAIG,IAAzB,CAAL,EAAqC;AACnCF,UAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAUP,IAAIQ,MAAJ,CAAW,CAAX,EAAcC,QAAxB,SAAoCT,IAAIQ,MAAJ,CAAW,CAAX,EAAcE,OAApD,EAArB;AACA;AACD;;AAED,QAAI;AACF,UAAMC,SAAS,qBAAWC,SAAX,CAAqBX,IAAIG,IAAJ,CAASX,QAA9B,CAAf;;AAEA,UAAI,CAACkB,MAAL,EAAa;AACXT,YAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,mBAAT,EAArB;AACA;AACD;;AAED,UAAMZ,YAAYgB,OAAOE,SAAP,CAAiBC,KAAjB,CAAuBC,YAAvB,CAAoCd,IAAIG,IAAJ,CAAST,SAA7C,CAAlB;AACAO,UAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAAoBX,SAApB,CAArB;AACD,KAVD,CAUE,OAAOY,KAAP,EAAc;AACdL,UAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOA,MAAMG,OAAf,EAArB;AACD;AACF,GAnBD;AAoBD","file":"addBehaviourMiddleware.js","sourcesContent":["import serversHub from '../../serversHub';\nimport { behaviourToResponse } from './transformers';\n\nconst schema = {\n  properties: {\n    serverId: {\n      type: 'string'\n    },\n    behaviour: {\n      type: 'object',\n      properties: {\n        event: {\n          type: 'object',\n          properties: {\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['type']\n        },\n        reactions: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              type: {\n                type: 'string'\n              }\n            },\n            required: ['type']\n          }\n        }\n      },\n      required: ['reactions', 'event']\n    }\n  },\n  required: ['serverId', 'behaviour']\n};\n\nexport default function configure(ajv) {\n  return (req, res) => {\n    if (!ajv.validate(schema, req.body)) {\n      res.status(400).json({ error: `${ajv.errors[0].dataPath} ${ajv.errors[0].message}` });\n      return;\n    }\n\n    try {\n      const server = serversHub.getServer(req.body.serverId);\n\n      if (!server) {\n        res.status(400).json({ error: 'Server not found.' });\n        return;\n      }\n\n      const behaviour = server.webServer.codex.addBehaviour(req.body.behaviour);\n      res.status(200).json(behaviourToResponse(behaviour));\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  };\n}\n"]}