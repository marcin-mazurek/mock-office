{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/editServerMiddleware.js"],"names":["configure","ajv","req","res","schema","properties","name","type","minLength","port","minimum","recordMode","id","required","validate","body","splitPath","errors","dataPath","split","param","length","status","json","error","message","server","getServer","end","webServer","triggerRecordMode","changePort","then"],"mappings":";;;;;kBAGwBA,S;;AAHxB;;;;AACA;;;;AAEe,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,SAAO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAMC,SAAS;AACbC,kBAAY;AACVC,cAAM;AACJC,gBAAM,QADF;AAEJC,qBAAW;AAFP,SADI;AAKVC,cAAM;AACJF,gBAAM,QADF;AAEJG,mBAAS;AAFL,SALI;AASVC,oBAAY;AACVJ,gBAAM;AADI,SATF;AAYVK,YAAI;AACFL,gBAAM;AADJ;AAZM,OADC;AAiBbM,gBAAU,CAAC,IAAD;AAjBG,KAAf;;AAoBA,QAAI,CAACZ,IAAIa,QAAJ,CAAaV,MAAb,EAAqBF,IAAIa,IAAzB,CAAL,EAAqC;AACnC,UAAMC,YAAYf,IAAIgB,MAAJ,CAAW,CAAX,EAAcC,QAAd,CAAuBC,KAAvB,CAA6B,GAA7B,CAAlB;AACA,UAAMC,QAAQJ,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAAd;AACAlB,UAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAUJ,KAAV,SAAmBnB,IAAIgB,MAAJ,CAAW,CAAX,EAAcQ,OAAnC,EAArB;AACA;AACD;;AA1BkB,oBA4BoBvB,IAAIa,IA5BxB;AAAA,QA4BXH,EA5BW,aA4BXA,EA5BW;AAAA,QA4BPN,IA5BO,aA4BPA,IA5BO;AAAA,QA4BDG,IA5BC,aA4BDA,IA5BC;AAAA,QA4BKE,UA5BL,aA4BKA,UA5BL;;AA6BnB,QAAMe,SAAS,qBAAWC,SAAX,CAAqBf,EAArB,CAAf;AACA,QAAI,CAACc,MAAL,EAAa;AACXvB,UAAImB,MAAJ,CAAW,GAAX,EAAgBM,GAAhB;AACA;AACD;;AAED,QAAItB,IAAJ,EAAU;AACRoB,aAAOpB,IAAP,GAAcA,IAAd;AACD;;AAED,QAAI,OAAOK,UAAP,KAAsB,WAA1B,EAAuC;AACrCe,aAAOG,SAAP,CAAiBC,iBAAjB,CAAmCnB,UAAnC;AACD;;AAED,QAAIF,IAAJ,EAAU;AACRiB,aAAOG,SAAP,CAAiBE,UAAjB,CAA4BtB,IAA5B,EACGuB,IADH,CACQ,YAAM;AACV7B,YAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAAiBG,MAAjB,CAArB;AACD,OAHH;AAID,KALD,MAKO;AACLvB,UAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAAiBG,MAAjB,CAArB;AACD;AACF,GAnDD;AAoDD","file":"editServerMiddleware.js","sourcesContent":["import serversHub from '../../serversHub';\nimport { serverToResponse } from './transformers';\n\nexport default function configure(ajv) {\n  return (req, res) => {\n    const schema = {\n      properties: {\n        name: {\n          type: 'string',\n          minLength: 1\n        },\n        port: {\n          type: 'number',\n          minimum: 3000\n        },\n        recordMode: {\n          type: 'boolean'\n        },\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id']\n    };\n\n    if (!ajv.validate(schema, req.body)) {\n      const splitPath = ajv.errors[0].dataPath.split('.');\n      const param = splitPath[splitPath.length - 1];\n      res.status(400).json({ error: `${param} ${ajv.errors[0].message}` });\n      return;\n    }\n\n    const { id, name, port, recordMode } = req.body;\n    const server = serversHub.getServer(id);\n    if (!server) {\n      res.status(404).end();\n      return;\n    }\n\n    if (name) {\n      server.name = name;\n    }\n\n    if (typeof recordMode !== 'undefined') {\n      server.webServer.triggerRecordMode(recordMode);\n    }\n\n    if (port) {\n      server.webServer.changePort(port)\n        .then(() => {\n          res.status(200).json(serverToResponse(server));\n        });\n    } else {\n      res.status(200).json(serverToResponse(server));\n    }\n  };\n}\n"]}