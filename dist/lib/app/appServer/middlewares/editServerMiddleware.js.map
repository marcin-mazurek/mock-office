{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/editServerMiddleware.js"],"names":["configure","ajv","createResponseBody","name","server","port","webServer","type","secure","id","running","isLive","req","res","schema","properties","minLength","minimum","required","validate","body","splitPath","errors","dataPath","split","param","length","status","json","error","message","getServer","end","changePort","then"],"mappings":";;;;;kBAEwBA,S;;AAFxB;;;;;;AAEe,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,MAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,WAAW;AACpCC,YAAMC,OAAOD,IADuB;AAEpCE,YAAMD,OAAOE,SAAP,CAAiBD,IAFa;AAGpCE,YAAMH,OAAOG,IAHuB;AAIpCC,cAAQJ,OAAOE,SAAP,CAAiBE,MAJW;AAKpCC,UAAIL,OAAOK,EALyB;AAMpCC,eAASN,OAAOE,SAAP,CAAiBK,MAAjB;AAN2B,KAAX;AAAA,GAA3B;;AASA,SAAO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAMC,SAAS;AACbC,kBAAY;AACVZ,cAAM;AACJI,gBAAM,QADF;AAEJS,qBAAW;AAFP,SADI;AAKVX,cAAM;AACJE,gBAAM,QADF;AAEJU,mBAAS;AAFL,SALI;AASVR,YAAI;AACFF,gBAAM;AADJ;AATM,OADC;AAcbW,gBAAU,CAAC,IAAD;AAdG,KAAf;;AAiBA,QAAI,CAACjB,IAAIkB,QAAJ,CAAaL,MAAb,EAAqBF,IAAIQ,IAAzB,CAAL,EAAqC;AACnC,UAAMC,YAAYpB,IAAIqB,MAAJ,CAAW,CAAX,EAAcC,QAAd,CAAuBC,KAAvB,CAA6B,GAA7B,CAAlB;AACA,UAAMC,QAAQJ,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAAd;AACAb,UAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAUJ,KAAV,SAAmBxB,IAAIqB,MAAJ,CAAW,CAAX,EAAcQ,OAAnC,EAArB;AACA;AACD;;AAvBkB,oBAyBQlB,IAAIQ,IAzBZ;AAAA,QAyBXX,EAzBW,aAyBXA,EAzBW;AAAA,QAyBPN,IAzBO,aAyBPA,IAzBO;AAAA,QAyBDE,IAzBC,aAyBDA,IAzBC;;AA0BnB,QAAMD,SAAS,qBAAW2B,SAAX,CAAqBtB,EAArB,CAAf;AACA,QAAI,CAACL,MAAL,EAAa;AACXS,UAAIc,MAAJ,CAAW,GAAX,EAAgBK,GAAhB;AACA;AACD;AACD,QAAI7B,IAAJ,EAAU;AACRC,aAAOD,IAAP,GAAcA,IAAd;AACD;;AAED,QAAIE,IAAJ,EAAU;AACRD,aAAOE,SAAP,CAAiB2B,UAAjB,CAA4B5B,IAA5B,EAAkC6B,IAAlC,CAAuC,YAAM;AAC3CrB,YAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB1B,mBAAmBE,MAAnB,CAArB;AACD,OAFD;AAGD,KAJD,MAIO;AACLS,UAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB1B,mBAAmBE,MAAnB,CAArB;AACD;AACF,GA1CD;AA2CD","file":"editServerMiddleware.js","sourcesContent":["import serversHub from '../../serversHub';\n\nexport default function configure(ajv) {\n  const createResponseBody = server => ({\n    name: server.name,\n    port: server.webServer.port,\n    type: server.type,\n    secure: server.webServer.secure,\n    id: server.id,\n    running: server.webServer.isLive(),\n  });\n\n  return (req, res) => {\n    const schema = {\n      properties: {\n        name: {\n          type: 'string',\n          minLength: 1\n        },\n        port: {\n          type: 'number',\n          minimum: 3000\n        },\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id']\n    };\n\n    if (!ajv.validate(schema, req.body)) {\n      const splitPath = ajv.errors[0].dataPath.split('.');\n      const param = splitPath[splitPath.length - 1];\n      res.status(400).json({ error: `${param} ${ajv.errors[0].message}` });\n      return;\n    }\n\n    const { id, name, port } = req.body;\n    const server = serversHub.getServer(id);\n    if (!server) {\n      res.status(404).end();\n      return;\n    }\n    if (name) {\n      server.name = name;\n    }\n\n    if (port) {\n      server.webServer.changePort(port).then(() => {\n        res.status(200).json(createResponseBody(server));\n      });\n    } else {\n      res.status(200).json(createResponseBody(server));\n    }\n  };\n}\n"]}