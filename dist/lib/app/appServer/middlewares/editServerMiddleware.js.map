{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/editServerMiddleware.js"],"names":["editServerMiddleware","req","res","schema","properties","name","type","minLength","port","minimum","recordMode","id","required","validate","body","splitPath","errors","dataPath","split","param","length","status","json","error","message","fallbackUrl","server","getServer","end","webServer","triggerRecordMode","changePort","then"],"mappings":";;;;;kBAKwBA,oB;;AALxB;;AACA;;;;AACA;;AACA;;;;;;AAEe,SAASA,oBAAT,CAA8BC,GAA9B,EAAmCC,GAAnC,EAAwC;AACrD,MAAMC,SAAS;AACbC,gBAAY;AACVC,YAAM;AACJC,cAAM,QADF;AAEJC,mBAAW;AAFP,OADI;AAKVC,YAAM;AACJF,cAAM,QADF;AAEJG,iBAAS;AAFL,OALI;AASVC,kBAAY;AACVJ,cAAM;AADI,OATF;AAYVK,UAAI;AACFL,cAAM;AADJ;AAZM,KADC;AAiBbM,cAAU,CAAC,IAAD;AAjBG,GAAf;;AAoBA,MAAI,CAAC,cAAIC,QAAJ,CAAaV,MAAb,EAAqBF,IAAIa,IAAzB,CAAL,EAAqC;AACnC,QAAMC,YAAY,cAAIC,MAAJ,CAAW,CAAX,EAAcC,QAAd,CAAuBC,KAAvB,CAA6B,GAA7B,CAAlB;AACA,QAAMC,QAAQJ,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAAd;AACAlB,QAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAUJ,KAAV,SAAmB,cAAIH,MAAJ,CAAW,CAAX,EAAcQ,OAAnC,EAArB;AACA;AACD;;AA1BoD,kBA4BDvB,IAAIa,IA5BH;AAAA,MA4B7CH,EA5B6C,aA4B7CA,EA5B6C;AAAA,MA4BzCN,IA5ByC,aA4BzCA,IA5ByC;AAAA,MA4BnCG,IA5BmC,aA4BnCA,IA5BmC;AAAA,MA4B7BE,UA5B6B,aA4B7BA,UA5B6B;AAAA,MA4BjBe,WA5BiB,aA4BjBA,WA5BiB;;AA6BrD,MAAMC,SAAS,qBAAWC,SAAX,CAAqBhB,EAArB,CAAf;AACA,MAAI,CAACe,MAAL,EAAa;AACXxB,QAAImB,MAAJ,CAAW,GAAX,EAAgBO,GAAhB;AACA;AACD;;AAED,MAAIvB,IAAJ,EAAU;AACRqB,WAAOrB,IAAP,GAAcA,IAAd;AACD;;AAED,MAAIoB,WAAJ,EAAiB;AACfC,WAAOG,SAAP,CAAiBJ,WAAjB,GAA+BA,WAA/B;AACD;;AAED,MAAI,OAAOf,UAAP,KAAsB,WAA1B,EAAuC;AACrCgB,WAAOG,SAAP,CAAiBC,iBAAjB,CAAmCpB,UAAnC;AACD;;AAED,MAAIF,IAAJ,EAAU;AACRkB,WAAOG,SAAP,CAAiBE,UAAjB,CAA4BvB,IAA5B,EACGwB,IADH,CACQ,YAAM;AACV9B,UAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAAK,CAAC,YAAD,CAAL,EAAqB,oCAAiBI,MAAjB,CAArB,CAArB;AACD,KAHH;AAID,GALD,MAKO;AACLxB,QAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAAK,CAAC,YAAD,CAAL,EAAqB,oCAAiBI,MAAjB,CAArB,CAArB;AACD;AACF","file":"editServerMiddleware.js","sourcesContent":["import { omit } from 'ramda';\nimport serversHub from '../../serversHub';\nimport { serverToResponse } from './transformers';\nimport ajv from '../ajv';\n\nexport default function editServerMiddleware(req, res) {\n  const schema = {\n    properties: {\n      name: {\n        type: 'string',\n        minLength: 1\n      },\n      port: {\n        type: 'number',\n        minimum: 3000\n      },\n      recordMode: {\n        type: 'boolean'\n      },\n      id: {\n        type: 'string'\n      }\n    },\n    required: ['id']\n  };\n\n  if (!ajv.validate(schema, req.body)) {\n    const splitPath = ajv.errors[0].dataPath.split('.');\n    const param = splitPath[splitPath.length - 1];\n    res.status(400).json({ error: `${param} ${ajv.errors[0].message}` });\n    return;\n  }\n\n  const { id, name, port, recordMode, fallbackUrl } = req.body;\n  const server = serversHub.getServer(id);\n  if (!server) {\n    res.status(404).end();\n    return;\n  }\n\n  if (name) {\n    server.name = name;\n  }\n\n  if (fallbackUrl) {\n    server.webServer.fallbackUrl = fallbackUrl;\n  }\n\n  if (typeof recordMode !== 'undefined') {\n    server.webServer.triggerRecordMode(recordMode);\n  }\n\n  if (port) {\n    server.webServer.changePort(port)\n      .then(() => {\n        res.status(200).json(omit(['behaviours'], serverToResponse(server)));\n      });\n  } else {\n    res.status(200).json(omit(['behaviours'], serverToResponse(server)));\n  }\n}\n"]}