{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/editServerMiddleware.js"],"names":["configure","ajv","req","res","schema","properties","name","type","minLength","port","minimum","recordMode","id","required","validate","body","splitPath","errors","dataPath","split","param","length","status","json","error","message","fallbackUrl","server","getServer","end","webServer","triggerRecordMode","changePort","then"],"mappings":";;;;;kBAIwBA,S;;AAJxB;;AACA;;;;AACA;;;;AAEe,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,SAAO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAMC,SAAS;AACbC,kBAAY;AACVC,cAAM;AACJC,gBAAM,QADF;AAEJC,qBAAW;AAFP,SADI;AAKVC,cAAM;AACJF,gBAAM,QADF;AAEJG,mBAAS;AAFL,SALI;AASVC,oBAAY;AACVJ,gBAAM;AADI,SATF;AAYVK,YAAI;AACFL,gBAAM;AADJ;AAZM,OADC;AAiBbM,gBAAU,CAAC,IAAD;AAjBG,KAAf;;AAoBA,QAAI,CAACZ,IAAIa,QAAJ,CAAaV,MAAb,EAAqBF,IAAIa,IAAzB,CAAL,EAAqC;AACnC,UAAMC,YAAYf,IAAIgB,MAAJ,CAAW,CAAX,EAAcC,QAAd,CAAuBC,KAAvB,CAA6B,GAA7B,CAAlB;AACA,UAAMC,QAAQJ,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAAd;AACAlB,UAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAUJ,KAAV,SAAmBnB,IAAIgB,MAAJ,CAAW,CAAX,EAAcQ,OAAnC,EAArB;AACA;AACD;;AA1BkB,oBA4BiCvB,IAAIa,IA5BrC;AAAA,QA4BXH,EA5BW,aA4BXA,EA5BW;AAAA,QA4BPN,IA5BO,aA4BPA,IA5BO;AAAA,QA4BDG,IA5BC,aA4BDA,IA5BC;AAAA,QA4BKE,UA5BL,aA4BKA,UA5BL;AAAA,QA4BiBe,WA5BjB,aA4BiBA,WA5BjB;;AA6BnB,QAAMC,SAAS,qBAAWC,SAAX,CAAqBhB,EAArB,CAAf;AACA,QAAI,CAACe,MAAL,EAAa;AACXxB,UAAImB,MAAJ,CAAW,GAAX,EAAgBO,GAAhB;AACA;AACD;;AAED,QAAIvB,IAAJ,EAAU;AACRqB,aAAOrB,IAAP,GAAcA,IAAd;AACD;;AAED,QAAIoB,WAAJ,EAAiB;AACfC,aAAOG,SAAP,CAAiBJ,WAAjB,GAA+BA,WAA/B;AACD;;AAED,QAAI,OAAOf,UAAP,KAAsB,WAA1B,EAAuC;AACrCgB,aAAOG,SAAP,CAAiBC,iBAAjB,CAAmCpB,UAAnC;AACD;;AAED,QAAIF,IAAJ,EAAU;AACRkB,aAAOG,SAAP,CAAiBE,UAAjB,CAA4BvB,IAA5B,EACGwB,IADH,CACQ,YAAM;AACV9B,YAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAAK,CAAC,YAAD,CAAL,EAAqB,oCAAiBI,MAAjB,CAArB,CAArB;AACD,OAHH;AAID,KALD,MAKO;AACLxB,UAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAAK,CAAC,YAAD,CAAL,EAAqB,oCAAiBI,MAAjB,CAArB,CAArB;AACD;AACF,GAvDD;AAwDD","file":"editServerMiddleware.js","sourcesContent":["import { omit } from 'ramda';\nimport serversHub from '../../serversHub';\nimport { serverToResponse } from './transformers';\n\nexport default function configure(ajv) {\n  return (req, res) => {\n    const schema = {\n      properties: {\n        name: {\n          type: 'string',\n          minLength: 1\n        },\n        port: {\n          type: 'number',\n          minimum: 3000\n        },\n        recordMode: {\n          type: 'boolean'\n        },\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id']\n    };\n\n    if (!ajv.validate(schema, req.body)) {\n      const splitPath = ajv.errors[0].dataPath.split('.');\n      const param = splitPath[splitPath.length - 1];\n      res.status(400).json({ error: `${param} ${ajv.errors[0].message}` });\n      return;\n    }\n\n    const { id, name, port, recordMode, fallbackUrl } = req.body;\n    const server = serversHub.getServer(id);\n    if (!server) {\n      res.status(404).end();\n      return;\n    }\n\n    if (name) {\n      server.name = name;\n    }\n\n    if (fallbackUrl) {\n      server.webServer.fallbackUrl = fallbackUrl;\n    }\n\n    if (typeof recordMode !== 'undefined') {\n      server.webServer.triggerRecordMode(recordMode);\n    }\n\n    if (port) {\n      server.webServer.changePort(port)\n        .then(() => {\n          res.status(200).json(omit(['behaviours'], serverToResponse(server)));\n        });\n    } else {\n      res.status(200).json(omit(['behaviours'], serverToResponse(server)));\n    }\n  };\n}\n"]}