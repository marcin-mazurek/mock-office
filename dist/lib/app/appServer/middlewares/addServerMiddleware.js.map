{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/addServerMiddleware.js"],"names":["addServerMiddleware","req","res","schema","type","properties","name","minLength","port","minimum","enum","secure","keyPath","certPath","required","validate","body","server","add","json","splitPath","errors","dataPath","split","param","length","status","error","message"],"mappings":";;;;;kBAIwBA,mB;;AAJxB;;;;AACA;;AACA;;;;;;AAEe,SAASA,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;AACpD,MAAMC,SAAS;AACbC,UAAM,QADO;AAEbC,gBAAY;AACVC,YAAM;AACJF,cAAM,QADF;AAEJG,mBAAW;AAFP,OADI;AAKVC,YAAM;AACJJ,cAAM,QADF;AAEJK,iBAAS;AAFL,OALI;AASVL,YAAM;AACJA,cAAM,QADF;AAEJM,cAAM,CAAC,MAAD,EAAS,IAAT;AAFF,OATI;AAaVC,cAAQ;AACNP,cAAM;AADA,OAbE;AAgBVQ,eAAS;AACPR,cAAM;AADC,OAhBC;AAmBVS,gBAAU;AACRT,cAAM;AADE;AAnBA,KAFC;AAyBbU,cAAU,CACR,MADQ,EAER,MAFQ;AAzBG,GAAf;;AA+BA,MAAI,cAAIC,QAAJ,CAAaZ,MAAb,EAAqBF,IAAIe,IAAzB,CAAJ,EAAoC;AAClC,QAAMC,SAAS,qBAAWC,GAAX,CAAejB,IAAIe,IAAnB,CAAf;;AAEAd,QAAIiB,IAAJ,CAAS,oCAAiBF,MAAjB,CAAT;;AAEA;AACD;;AAED,MAAMG,YAAY,cAAIC,MAAJ,CAAW,CAAX,EAAcC,QAAd,CAAuBC,KAAvB,CAA6B,GAA7B,CAAlB;AACA,MAAMC,QAAQJ,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAAd;AACAvB,MAAIwB,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEQ,OAAUH,KAAV,SAAmB,CAAC,CAAD,EAAII,OAAzB,EAArB;AACD","file":"addServerMiddleware.js","sourcesContent":["import serversHub from '../../serversHub';\nimport { serverToResponse } from './transformers';\nimport ajv from '../ajv';\n\nexport default function addServerMiddleware(req, res) {\n  const schema = {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n        minLength: 1\n      },\n      port: {\n        type: 'number',\n        minimum: 3000\n      },\n      type: {\n        type: 'string',\n        enum: ['http', 'ws']\n      },\n      secure: {\n        type: 'boolean'\n      },\n      keyPath: {\n        type: 'string'\n      },\n      certPath: {\n        type: 'string'\n      }\n    },\n    required: [\n      'name',\n      'type'\n    ]\n  };\n\n  if (ajv.validate(schema, req.body)) {\n    const server = serversHub.add(req.body);\n\n    res.json(serverToResponse(server));\n\n    return;\n  }\n\n  const splitPath = ajv.errors[0].dataPath.split('.');\n  const param = splitPath[splitPath.length - 1];\n  res.status(400).json({ error: `${param} ${[0].message}` });\n}\n"]}