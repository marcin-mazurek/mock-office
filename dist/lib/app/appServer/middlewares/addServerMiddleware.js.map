{"version":3,"sources":["../../../../../src/lib/app/appServer/middlewares/addServerMiddleware.js"],"names":["configure","ajv","req","res","schema","type","properties","name","minLength","port","minimum","enum","secure","keyPath","certPath","required","validate","body","server","add","json","splitPath","errors","dataPath","split","param","length","status","error","message"],"mappings":";;;;;kBAGwBA,S;;AAHxB;;;;AACA;;;;AAEe,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,SAAO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAMC,SAAS;AACbC,YAAM,QADO;AAEbC,kBAAY;AACVC,cAAM;AACJF,gBAAM,QADF;AAEJG,qBAAW;AAFP,SADI;AAKVC,cAAM;AACJJ,gBAAM,QADF;AAEJK,mBAAS;AAFL,SALI;AASVL,cAAM;AACJA,gBAAM,QADF;AAEJM,gBAAM,CAAC,MAAD,EAAS,IAAT;AAFF,SATI;AAaVC,gBAAQ;AACNP,gBAAM;AADA,SAbE;AAgBVQ,iBAAS;AACPR,gBAAM;AADC,SAhBC;AAmBVS,kBAAU;AACRT,gBAAM;AADE;AAnBA,OAFC;AAyBbU,gBAAU,CACR,MADQ,EAER,MAFQ;AAzBG,KAAf;;AA+BA,QAAId,IAAIe,QAAJ,CAAaZ,MAAb,EAAqBF,IAAIe,IAAzB,CAAJ,EAAoC;AAClC,UAAMC,SAAS,qBAAWC,GAAX,CAAejB,IAAIe,IAAnB,CAAf;;AAEAd,UAAIiB,IAAJ,CAAS,oCAAiBF,MAAjB,CAAT;;AAEA;AACD;;AAED,QAAMG,YAAYpB,IAAIqB,MAAJ,CAAW,CAAX,EAAcC,QAAd,CAAuBC,KAAvB,CAA6B,GAA7B,CAAlB;AACA,QAAMC,QAAQJ,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAAd;AACAvB,QAAIwB,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEQ,OAAUH,KAAV,SAAmB,CAAC,CAAD,EAAII,OAAzB,EAArB;AACD,GA3CD;AA4CD","file":"addServerMiddleware.js","sourcesContent":["import serversHub from '../../serversHub';\nimport { serverToResponse } from './transformers';\n\nexport default function configure(ajv) {\n  return (req, res) => {\n    const schema = {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n          minLength: 1\n        },\n        port: {\n          type: 'number',\n          minimum: 3000\n        },\n        type: {\n          type: 'string',\n          enum: ['http', 'ws']\n        },\n        secure: {\n          type: 'boolean'\n        },\n        keyPath: {\n          type: 'string'\n        },\n        certPath: {\n          type: 'string'\n        }\n      },\n      required: [\n        'name',\n        'type'\n      ]\n    };\n\n    if (ajv.validate(schema, req.body)) {\n      const server = serversHub.add(req.body);\n\n      res.json(serverToResponse(server));\n\n      return;\n    }\n\n    const splitPath = ajv.errors[0].dataPath.split('.');\n    const param = splitPath[splitPath.length - 1];\n    res.status(400).json({ error: `${param} ${[0].message}` });\n  };\n}\n"]}