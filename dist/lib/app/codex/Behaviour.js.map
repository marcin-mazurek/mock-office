{"version":3,"sources":["../../../../src/lib/app/codex/Behaviour.js"],"names":["Behaviour","serverId","config","event","type","params","id","loadedCounter","runCounter","reactions","forEach","reactionCfg","push","createReaction","pendingReactions","status","cfg","statuses","PENDING","behaviourId","reactionsFinishedCount","onReactionSuccess","filter","pR","length","FINISHED","map","r","cancel","execute","CANCELLED","INACTIVE"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;IAEqBA,S;AACnB,qBAAYC,QAAZ,EAAsBC,MAAtB,EAA8B;AAAA;;AAAA;;AAC5B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKE,KAAL,GAAa,oBAAUD,OAAOC,KAAP,CAAaC,IAAvB,EAA6BF,OAAOC,KAAP,CAAaE,MAA1C,CAAb;AACA,SAAKC,EAAL,GAAU,qBAAV;AACA,SAAKC,aAAL,GAAqBL,OAAOK,aAAP,IAAwB,CAA7C;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACAP,WAAOO,SAAP,CAAiBC,OAAjB,CAAyB,UAACC,WAAD,EAAiB;AACxC,YAAKF,SAAL,CAAeG,IAAf,CAAoB,MAAKC,cAAL,CAAoB,MAAKP,EAAzB,EAA6BK,WAA7B,CAApB;AACD,KAFD;AAGA,SAAKG,gBAAL,GAAwB,EAAxB;AACA,SAAKC,MAAL,GAAc,UAAd;AACD;;AAED;AACA;;;;;mCACeT,E,EAAIU,G,EAAK;AACtB,aAAO,uBAAaV,EAAb,EAAiBU,GAAjB,CAAP;AACD;AACD;;AAEA;;;;8BACU;AAAA;;AACR,UAAI,KAAKR,UAAL,KAAoB,KAAKD,aAA7B,EAA4C;AAC1C;AACD;;AAED,WAAKQ,MAAL,GAAcf,UAAUiB,QAAV,CAAmBC,OAAjC;;AAEA,yBAAI,yBAAJ,EAA+B;AAC7BH,gBAAQf,UAAUiB,QAAV,CAAmBC,OADE;AAE7BC,qBAAa,KAAKb,EAFW;AAG7BL,kBAAU,KAAKA;AAHc,OAA/B;;AAMA,UAAImB,yBAAyB,CAA7B;AACA,UAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,eAAM,YAAM;AACpCD,oCAA0B,CAA1B;;AAEA,iBAAKN,gBAAL,GAAwB,OAAKA,gBAAL,CACrBQ,MADqB,CACd;AAAA,mBAAMC,GAAGjB,EAAH,KAAUA,EAAhB;AAAA,WADc,CAAxB;AAEA,cAAIc,2BAA2B,OAAKX,SAAL,CAAee,MAA9C,EAAsD;AACpD,mBAAKT,MAAL,GAAcf,UAAUiB,QAAV,CAAmBQ,QAAjC;;AAEA,+BAAI,yBAAJ,EAA+B;AAC7BV,sBAAQf,UAAUiB,QAAV,CAAmBQ,QADE;AAE7BN,2BAAa,OAAKb,EAFW;AAG7BL,wBAAU,OAAKA;AAHc,aAA/B;AAKD;AACF,SAdyB;AAAA,OAA1B;;AAgBA,WAAKa,gBAAL,GAAwB,KAAKL,SAAL,CAAeiB,GAAf,CAAmB;AAAA,eAAM;AAC/CpB,cAAIqB,EAAErB,EADyC;AAE/CsB,kBAAQD,EAAEE,OAAF,CAAUR,kBAAkBM,EAAErB,EAApB,CAAV;AAFuC,SAAN;AAAA,OAAnB,CAAxB;AAIA,WAAKE,UAAL,IAAmB,CAAnB;AACD;;AAED;;;;6BACS;AACP,UAAI,KAAKM,gBAAL,CAAsBU,MAA1B,EAAkC;AAChC,aAAKV,gBAAL,CAAsBJ,OAAtB,CAA8B;AAAA,iBAAMa,GAAGK,MAAH,EAAN;AAAA,SAA9B;AACA,aAAKb,MAAL,GAAcf,UAAUiB,QAAV,CAAmBa,SAAjC;;AAEA,2BAAI,yBAAJ,EAA+B;AAC7Bf,kBAAQf,UAAUiB,QAAV,CAAmBa,SADE;AAE7BX,uBAAa,KAAKb,EAFW;AAG7BL,oBAAU,KAAKA;AAHc,SAA/B;AAKD;AACF;;;;;;kBAxEkBD,S;;;AA2ErBA,UAAUiB,QAAV,GAAqB;AACnBc,YAAU,UADS;AAEnBb,WAAS,SAFU;AAGnBO,YAAU,UAHS;AAInBK,aAAW;AAJQ,CAArB","file":"Behaviour.js","sourcesContent":["import unique from 'cuid';\nimport Event from './Event';\nimport { log } from '../eventLog';\nimport Reaction from './Reaction';\n\nexport default class Behaviour {\n  constructor(serverId, config) {\n    this.serverId = serverId;\n    this.event = new Event(config.event.type, config.event.params);\n    this.id = unique();\n    this.loadedCounter = config.loadedCounter || 1;\n    this.runCounter = 0;\n    this.reactions = [];\n    config.reactions.forEach((reactionCfg) => {\n      this.reactions.push(this.createReaction(this.id, reactionCfg));\n    });\n    this.pendingReactions = [];\n    this.status = 'inactive';\n  }\n\n  /* eslint-disable class-methods-use-this */\n  // createReaction :: (String, Object) -> Reaction\n  createReaction(id, cfg) {\n    return new Reaction(id, cfg);\n  }\n  /* eslint-enable class-methods-use-this */\n\n  // :: void -> void\n  execute() {\n    if (this.runCounter === this.loadedCounter) {\n      return;\n    }\n\n    this.status = Behaviour.statuses.PENDING;\n\n    log('behaviour-status-change', {\n      status: Behaviour.statuses.PENDING,\n      behaviourId: this.id,\n      serverId: this.serverId\n    });\n\n    let reactionsFinishedCount = 0;\n    const onReactionSuccess = id => () => {\n      reactionsFinishedCount += 1;\n\n      this.pendingReactions = this.pendingReactions\n        .filter(pR => pR.id !== id);\n      if (reactionsFinishedCount === this.reactions.length) {\n        this.status = Behaviour.statuses.FINISHED;\n\n        log('behaviour-status-change', {\n          status: Behaviour.statuses.FINISHED,\n          behaviourId: this.id,\n          serverId: this.serverId\n        });\n      }\n    };\n\n    this.pendingReactions = this.reactions.map(r => ({\n      id: r.id,\n      cancel: r.execute(onReactionSuccess(r.id))\n    }));\n    this.runCounter += 1;\n  }\n\n  // cancel :: void -> void\n  cancel() {\n    if (this.pendingReactions.length) {\n      this.pendingReactions.forEach(pR => pR.cancel());\n      this.status = Behaviour.statuses.CANCELLED;\n\n      log('behaviour-status-change', {\n        status: Behaviour.statuses.CANCELLED,\n        behaviourId: this.id,\n        serverId: this.serverId\n      });\n    }\n  }\n}\n\nBehaviour.statuses = {\n  INACTIVE: 'inactive',\n  PENDING: 'pending',\n  FINISHED: 'finished',\n  CANCELLED: 'cancelled'\n};\n"]}