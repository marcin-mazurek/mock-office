{"version":3,"sources":["../../../../../src/lib/app/webServers/http/HttpWebServer.js"],"names":["HttpWebServer","id","config","saveSocketRef","bind","start","destroyOpenSockets","stop","isLive","changePort","sockets","port","secure","keyPath","certPath","pendingBehaviours","codex","fallbackUrl","recordMode","httpServer","proxy","createProxyServer","app","use","json","event","reaction","on","proxyReq","clientReq","type","params","path","enum","url","method","proxyRes","status","statusCode","body","chunk","payload","addBehaviour","reactions","loadedCounter","middlewares","req","res","next","handler","web","target","request$","fromEventPattern","do","behaviour","matchBehaviour","requestToEvent","configureReceiver","execute","push","credentials","key","readFileSync","cert","createServer","Promise","resolve","reject","requestsSub","subscribe","listen","err","code","shouldRecord","socket","forEach","destroy","length","pB","cancel","unsubscribe","close","listening","then","originalUrl","headers"],"mappings":"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","file":"HttpWebServer.js","sourcesContent":["import { Observable } from 'rxjs';\nimport express from 'express';\nimport https from 'https';\nimport http from 'http';\nimport fs from 'fs';\nimport bodyParser from 'body-parser';\nimport httpProxy from 'http-proxy';\nimport HttpServerCodex from './HttpServerCodex';\n\nexport default class HttpWebServer {\n  constructor(id, config) {\n    this.saveSocketRef = this.saveSocketRef.bind(this);\n    this.start = this.start.bind(this);\n    this.saveSocketRef = this.saveSocketRef.bind(this);\n    this.destroyOpenSockets = this.destroyOpenSockets.bind(this);\n    this.stop = this.stop.bind(this);\n    this.isLive = this.isLive.bind(this);\n    this.changePort = this.changePort.bind(this);\n    this.id = id;\n    this.sockets = [];\n    this.port = config.port || 3000;\n    this.secure = config.secure;\n    this.keyPath = config.keyPath;\n    this.certPath = config.certPath;\n    this.pendingBehaviours = [];\n    this.codex = new HttpServerCodex(this.id);\n    this.fallbackUrl = config.fallbackUrl || '';\n    this.recordMode = false;\n    const httpServer = this.secure ? https : http;\n    this.proxy = httpProxy.createProxyServer();\n\n    const app = express();\n    app.use(bodyParser.json());\n\n    let event;\n    let reaction;\n\n    // record\n    this.proxy.on('proxyReq', (proxyReq, clientReq) => {\n      if (this.recordMode) {\n        event = {\n          type: 'request',\n          params: {\n            path: {\n              type: 'string',\n              enum: [clientReq.url]\n            },\n            method: {\n              type: 'string',\n              enum: [clientReq.method]\n            }\n          }\n        };\n      }\n    });\n\n    this.proxy.on('proxyRes', (proxyRes) => {\n      if (this.recordMode) {\n        reaction = {\n          type: 'response',\n          params: {\n            status: proxyRes.statusCode\n          }\n        };\n\n        let body = '';\n\n        proxyRes.on('data', (chunk) => {\n          body += chunk;\n        });\n        proxyRes.on('end', () => {\n          reaction.params.payload = body;\n          this.codex.addBehaviour({\n            event,\n            reactions: [reaction],\n            loadedCounter: 1000\n          });\n        });\n      }\n    });\n\n    const middlewares = [\n      (req, res, next) => {\n        this.handler({ req, res, next });\n      },\n      (req, res, next) => {\n        if (this.fallbackUrl) {\n          this.proxy.web(req, res, { target: this.fallbackUrl });\n        } else {\n          next();\n        }\n      }\n    ];\n\n    app.use('*', middlewares);\n\n    this.request$ = Observable\n      .fromEventPattern((handler) => {\n        this.handler = handler;\n      })\n      .do(({ req, res, next }) => {\n        const behaviour = this.codex.matchBehaviour(HttpWebServer.requestToEvent(req));\n\n        if (behaviour) {\n          behaviour\n            .configureReceiver(req, res)\n            .execute();\n          this.pendingBehaviours.push(behaviour);\n        } else {\n          next();\n        }\n      });\n\n    if (this.secure) {\n      const credentials = {\n        key: fs.readFileSync(this.keyPath),\n        cert: fs.readFileSync(this.certPath)\n      };\n\n      this.httpServer = httpServer.createServer(credentials, app);\n    } else {\n      this.httpServer = httpServer.createServer(app);\n    }\n\n    // we need store sockets to destroy them manually before closing server\n    this.httpServer.on('connection', this.saveSocketRef);\n  }\n\n  // requestToEvent :: http.ClientRequest -> Object\n  static requestToEvent(req) {\n    return {\n      type: 'request',\n      params: {\n        path: req.originalUrl,\n        method: req.method,\n        headers: req.headers\n      }\n    };\n  }\n\n  // start :: void -> Promise\n  start() {\n    return new Promise((resolve, reject) => {\n      this.requestsSub = this.request$.subscribe();\n      this.httpServer.listen(this.port, resolve);\n      this.httpServer.on('error', (err) => {\n        if (err.code === 'EADDRINUSE') {\n          reject(`Port ${err.port} is in use. Choose different port.`);\n        }\n      });\n    });\n  }\n\n  // triggerRecordMode :: Boolean -> void\n  triggerRecordMode(shouldRecord) {\n    this.recordMode = shouldRecord;\n  }\n\n  // saveSocketRef :: Socket -> void\n  saveSocketRef(socket) {\n    this.sockets.push(socket);\n  }\n\n  // destroyOpenSockets :: void -> void\n  destroyOpenSockets() {\n    this.sockets.forEach(socket => socket.destroy());\n    this.sockets.length = 0;\n  }\n\n  // clearPendingReactions :: void -> void\n  clearPendingReactions() {\n    this.pendingBehaviours.forEach(pB => pB.cancel());\n    this.pendingBehaviours.length = 0;\n  }\n\n  // stop :: void -> Promise\n  stop() {\n    return new Promise((resolve) => {\n      if (this.requestsSub) {\n        this.requestsSub.unsubscribe();\n        this.requestsSub = null;\n      }\n\n      // Browsers can keep connection open, thus callback after\n      // HttpBehaviourServer.stop cant be called if there are sockets\n      // still open, so we need to ensure that all sockets are\n      // destroyed\n      // https://nodejs.org/api/net.html#net_server_close_callback\n      this.destroyOpenSockets();\n      this.httpServer.close(resolve);\n    });\n  }\n\n  // void -> Boolean\n  isLive() {\n    return this.httpServer.listening;\n  }\n\n  // changePort :: String -> Promise\n  changePort(port) {\n    if (this.isLive()) {\n      return this.stop()\n        .then(() => {\n          this.port = port;\n        })\n        .then(() => {\n          this.start();\n        });\n    }\n\n    this.port = port;\n    return Promise.resolve();\n  }\n}\n"]}