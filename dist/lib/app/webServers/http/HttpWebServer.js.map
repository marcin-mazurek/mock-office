{"version":3,"sources":["../../../../../src/lib/app/webServers/http/HttpWebServer.js"],"names":["HttpWebServer","id","config","saveSocketRef","bind","start","destroyOpenSockets","stop","isLive","changePort","sockets","port","secure","keyPath","certPath","pendingBehaviours","codex","fallbackUrl","httpServer","app","use","json","request$","fromEventPattern","handler","middlewares","req","res","next","push","target","do","behaviour","matchBehaviour","requestToEvent","configureReceiver","execute","credentials","key","readFileSync","cert","createServer","on","Promise","resolve","reject","requestsSub","subscribe","listen","err","code","socket","forEach","destroy","length","pB","cancel","unsubscribe","close","listening","then","type","params","path","originalUrl","method","headers"],"mappings":"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","file":"HttpWebServer.js","sourcesContent":["import { Observable } from 'rxjs';\nimport express from 'express';\nimport https from 'https';\nimport http from 'http';\nimport fs from 'fs';\nimport bodyParser from 'body-parser';\nimport proxy from 'http-proxy-middleware';\nimport HttpServerCodex from './HttpServerCodex';\n\nexport default class HttpWebServer {\n  constructor(id, config) {\n    this.saveSocketRef = this.saveSocketRef.bind(this);\n    this.start = this.start.bind(this);\n    this.saveSocketRef = this.saveSocketRef.bind(this);\n    this.destroyOpenSockets = this.destroyOpenSockets.bind(this);\n    this.stop = this.stop.bind(this);\n    this.isLive = this.isLive.bind(this);\n    this.changePort = this.changePort.bind(this);\n    this.id = id;\n    this.sockets = [];\n    this.port = config.port || 3000;\n    this.secure = config.secure;\n    this.keyPath = config.keyPath;\n    this.certPath = config.certPath;\n    this.pendingBehaviours = [];\n    this.codex = new HttpServerCodex(this.id);\n    this.fallbackUrl = config.fallbackUrl || '';\n    const httpServer = this.secure ? https : http;\n\n    const app = express();\n    app.use(bodyParser.json());\n\n    this.request$ = Observable\n      .fromEventPattern((handler) => {\n        const middlewares = [\n          (req, res, next) => {\n            handler({ req, res, next });\n          }\n        ];\n\n        if (this.fallbackUrl) {\n          middlewares.push(proxy({ target: this.fallbackUrl }));\n        }\n\n        app.use('*', middlewares);\n      })\n      .do(({ req, res, next }) => {\n        const behaviour = this.codex.matchBehaviour(HttpWebServer.requestToEvent(req));\n\n        if (behaviour) {\n          behaviour\n            .configureReceiver(req, res)\n            .execute();\n          this.pendingBehaviours.push(behaviour);\n        } else {\n          next();\n        }\n      });\n\n    if (this.secure) {\n      const credentials = {\n        key: fs.readFileSync(this.keyPath),\n        cert: fs.readFileSync(this.certPath)\n      };\n\n      this.httpServer = httpServer.createServer(credentials, app);\n    } else {\n      this.httpServer = httpServer.createServer(app);\n    }\n\n    // we need store sockets to destroy them manually before closing server\n    this.httpServer.on('connection', this.saveSocketRef);\n  }\n\n  // requestToEvent :: http.ClientRequest -> Object\n  static requestToEvent(req) {\n    return {\n      type: 'request',\n      params: {\n        path: req.originalUrl,\n        method: req.method,\n        headers: req.headers\n      }\n    };\n  }\n\n  // start :: void -> Promise\n  start() {\n    return new Promise((resolve, reject) => {\n      this.requestsSub = this.request$.subscribe();\n      this.httpServer.listen(this.port, resolve);\n      this.httpServer.on('error', (err) => {\n        if (err.code === 'EADDRINUSE') {\n          reject(`Port ${err.port} is in use. Choose different port.`);\n        }\n      });\n    });\n  }\n\n  // saveSocketRef :: Socket -> void\n  saveSocketRef(socket) {\n    this.sockets.push(socket);\n  }\n\n  // destroyOpenSockets :: void -> void\n  destroyOpenSockets() {\n    this.sockets.forEach(socket => socket.destroy());\n    this.sockets.length = 0;\n  }\n\n  // clearPendingReactions :: void -> void\n  clearPendingReactions() {\n    this.pendingBehaviours.forEach(pB => pB.cancel());\n    this.pendingBehaviours.length = 0;\n  }\n\n  // stop :: void -> Promise\n  stop() {\n    return new Promise((resolve) => {\n      if (this.requestsSub) {\n        this.requestsSub.unsubscribe();\n        this.requestsSub = null;\n      }\n\n      // Browsers can keep connection open, thus callback after\n      // HttpBehaviourServer.stop cant be called if there are sockets\n      // still open, so we need to ensure that all sockets are\n      // destroyed\n      // https://nodejs.org/api/net.html#net_server_close_callback\n      this.destroyOpenSockets();\n      this.httpServer.close(resolve);\n    });\n  }\n\n  // void -> Boolean\n  isLive() {\n    return this.httpServer.listening;\n  }\n\n  // changePort :: String -> Promise\n  changePort(port) {\n    if (this.isLive()) {\n      return this.stop()\n        .then(() => {\n          this.port = port;\n        })\n        .then(() => {\n          this.start();\n        });\n    }\n\n    this.port = port;\n    return Promise.resolve();\n  }\n}\n"]}