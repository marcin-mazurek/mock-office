{"version":3,"sources":["../../../../../src/lib/app/webServers/ws/WsWebServer.js"],"names":["WsWebServer","id","config","eventBus","port","secure","keyPath","certPath","start","bind","stop","isLive","changePort","pendingBehaviours","codex","httpServer","options","key","readFileSync","cert","createServer","wsServer","server","on","err","console","error","message","connections$","fromEventPattern","handler","filter","ws","do","messages$","map","type","params","matchBehaviour","event","behaviour","configureReceiver","execute","messagesSub","subscribe","clientDisconnect$","take","clearPendingReactions","connectionSub","clientDisconnectSub","mapTo","push","forEach","pB","cancel","length","Promise","resolve","listen","terminate","close","listening","then"],"mappings":"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","file":"WsWebServer.js","sourcesContent":["import { Server as WebSocketServer } from 'ws';\nimport { Observable } from 'rxjs';\nimport https from 'https';\nimport http from 'http';\nimport fs from 'fs';\nimport WsServerCodex from './WsServerCodex';\n\nexport default class WsWebServer {\n  constructor(id, config, eventBus) {\n    this.id = id;\n    if (eventBus) {\n      this.eventBus = eventBus;\n    }\n    this.port = config.port || 3000;\n    this.secure = config.secure;\n    this.keyPath = config.keyPath;\n    this.certPath = config.certPath;\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.isLive = this.isLive.bind(this);\n    this.changePort = this.changePort.bind(this);\n    this.pendingBehaviours = [];\n    this.codex = new WsServerCodex(this.id);\n\n    const httpServer = this.secure ? https : http;\n\n    if (this.secure) {\n      const options = {\n        key: fs.readFileSync(this.keyPath),\n        cert: fs.readFileSync(this.certPath)\n      };\n\n      this.httpServer = httpServer.createServer(options);\n    } else {\n      this.httpServer = httpServer.createServer();\n    }\n\n    this.wsServer = new WebSocketServer({ server: this.httpServer });\n    this.wsServer.on('error', (err) => {\n      // eslint-disable-next-line no-console\n      console.error(err.message);\n    });\n\n    this.connections$ = Observable.fromEventPattern((handler) => {\n      this.wsServer.on('connection', handler);\n    })\n    // support only one client\n    .filter(() => !this.ws)\n    .do((ws) => {\n      this.ws = ws;\n      this.messages$ = Observable.fromEventPattern((handler) => {\n        ws.on('message', handler);\n      })\n        .map(message => ({\n          type: 'message',\n          params: {\n            message\n          }\n        }))\n        .map(event => this.codex.matchBehaviour(event))\n        .filter(behaviour => !!behaviour)\n        .do((behaviour) => {\n          behaviour\n            .configureReceiver(this.ws)\n            .execute();\n        });\n      this.messagesSub = this.messages$.subscribe();\n\n      this.clientDisconnect$ = Observable.fromEventPattern((handler) => {\n        this.ws.on('close', handler);\n      })\n        .take(1)\n        .do(() => {\n          this.clearPendingReactions();\n          this.ws = null;\n          this.connectionSub = this.connections$.subscribe();\n        });\n\n      this.clientDisconnectSub = this.clientDisconnect$.subscribe();\n    })\n    .mapTo({\n      type: 'connection',\n    })\n    .map(event => ({\n      behaviour: this.codex.matchBehaviour(event)\n    }))\n    .filter(({ behaviour }) => !!behaviour)\n    .do(({ behaviour }) => {\n      behaviour\n      .configureReceiver(this.ws)\n      .execute();\n      this.pendingBehaviours.push(behaviour);\n    });\n  }\n\n  clearPendingReactions() {\n    this.pendingBehaviours.forEach(pB => pB.cancel());\n    this.pendingBehaviours.length = 0;\n  }\n\n  start() {\n    if (this.isLive()) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => {\n      this.connectionSub = this.connections$.subscribe();\n      this.httpServer.listen(this.port, resolve);\n    });\n  }\n\n  stop() {\n    if (!this.isLive()) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => {\n      if (this.ws) {\n        this.ws.terminate();\n      }\n\n      this.httpServer.close(resolve);\n    });\n  }\n\n  isLive() {\n    return this.httpServer.listening;\n  }\n\n  changePort(port) {\n    if (this.isLive()) {\n      return this.stop()\n        .then(() => {\n          this.port = port;\n        })\n        .then(() => {\n          this.start();\n        });\n    }\n\n    this.port = port;\n    return Promise.resolve();\n  }\n}\n"]}