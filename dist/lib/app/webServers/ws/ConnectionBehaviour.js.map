{"version":3,"sources":["../../../../../src/lib/app/webServers/ws/ConnectionBehaviour.js"],"names":["ConnectionBehaviour","ws","reactions","filter","r","forEach","configureReceiver","id","reactionCfg","reaction","type","Error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,mB;;;;;;;;;;;;AACnB;sCACkBC,E,EAAI;AACpB,WAAKC,SAAL,CACGC,MADH,CACU;AAAA,eAAKC,sCAAL;AAAA,OADV,EAEGC,OAFH,CAEW;AAAA,eAAKD,EAAEE,iBAAF,CAAoBL,EAApB,CAAL;AAAA,OAFX;;AAIA,aAAO,IAAP;AACD;;AAED;AACA;;;;mCACeM,E,EAAIC,W,EAAa;AAC9B,UAAIC,iBAAJ;;AAEA,UAAID,YAAYE,IAAZ,KAAqB,SAAzB,EAAoC;AAClCD,mBAAW,8BAAoBF,EAApB,EAAwBC,WAAxB,CAAX;AACD,OAFD,MAEO;AACL,cAAM,IAAIG,KAAJ,6BAAoCH,YAAYE,IAAhD,CAAN;AACD;;AAED,aAAOD,QAAP;AACD;;;;;;kBAtBkBT,mB","file":"ConnectionBehaviour.js","sourcesContent":["import Behaviour from '../../codex/Behaviour';\nimport MessageReaction from './MessageReaction';\n\nexport default class ConnectionBehaviour extends Behaviour {\n  // configureReceiver :: Socket -> ConnectionBehaviour\n  configureReceiver(ws) {\n    this.reactions\n      .filter(r => r instanceof MessageReaction)\n      .forEach(r => r.configureReceiver(ws));\n\n    return this;\n  }\n\n  // createReaction :: Object -> MessageReaction\n  // eslint-disable-next-line class-methods-use-this\n  createReaction(id, reactionCfg) {\n    let reaction;\n\n    if (reactionCfg.type === 'message') {\n      reaction = new MessageReaction(id, reactionCfg);\n    } else {\n      throw new Error(`Invalid reaction type: ${reactionCfg.type}`);\n    }\n\n    return reaction;\n  }\n}\n"]}